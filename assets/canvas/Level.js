
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


class Level extends Phaser.State {
	
	/**
	 * Level.
	 */
	constructor() {
		
		super();
		
	}
	
	init() {
		
		this.scale.pageAlignHorizontally = true;
		this.scale.pageAlignVertically = true;
		this.stage.backgroundColor = '#dff2fd';
		
	}
	
	preload () {
		
		this.load.audio('bgMusic', './assets/audio/bgMusic.mp3');
		this.load.audio('yesOrNo', './assets/audio/yesOrNo.mp3');
		this.load.audio('yes', './assets/audio/yes.mp3');
		this.load.audio('error', './assets/audio/error.mp3');
		this.load.audio('bigError', './assets/audio/bigError.mp3');
		this.load.audio('pain', './assets/audio/pain.mp3');
		this.load.audio('scream', './assets/audio/scream.mp3');
		this.load.audio('musicFin', './assets/audio/musicFin.mp3');
		this.load.audio('ew', './assets/audio/ew.mp3');
		this.load.audio('seriously', './assets/audio/seriously.mp3');
		
		this.load.pack('level', 'assets/pack.json');
		
	}
	
	create() {
		var _bg = this.add.sprite(0.0, 0.0, 'bg');
		_bg.scale.set(1.74, 1.74);
		_bg.pivot.set(1.0, 1.0);
		
		var _girl = this.add.sprite(205.0, 108.0, 'girl', 45);
		_girl.scale.set(1.735, 1.735);
		_girl.animations.add('start', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 12, false);
		_girl.animations.add('wait', [7, 8, 9, 10, 11, 9, 8, 7], 8, true);
		_girl.animations.add('choise', [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], 14, false);
		_girl.animations.add('fail', [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], 14, false);
		_girl.animations.add('failLoop', [123, 124, 125], 10, true);
		_girl.animations.add('win', [50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40], 10, false);
		_girl.animations.add('winLoop', [40, 40, 41, 42, 42, 42, 41, 40], 12, true);
		_girl.animations.add('preStart', [46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35], 12, false);
		_girl.animations.add('preStartWait', [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], 14, true);
		_girl.animations.add('closeEyes', [17, 16, 15, 14, 13, 12], 12, false);
		
		var _Food1 = this.add.button(512.0, 661.0, 'cake', null, this, null, null, null, null);
		_Food1.scale.set(0.2, 0.2);
		_Food1.alpha = 0.0;
		_Food1.anchor.set(0.5, 0.5);
		
		var _Food0 = this.add.button(281.0, 641.0, 'peppers', null, this, null, null, null, null);
		_Food0.scale.set(0.2, 0.2);
		_Food0.alpha = 0.0;
		_Food0.anchor.set(0.5, 0.5);
		
		var _quoteFeedMe = this.add.sprite(307.0, 110.0, 'quoteFeedMe');
		_quoteFeedMe.scale.set(0.6, 0.6);
		
		var _Btn1 = this.add.button(510.0, 686.0, 'noBtn', null, this, null, null, null, null);
		_Btn1.scale.set(0.5, 0.5);
		_Btn1.alpha = 0.0;
		_Btn1.anchor.set(0.5, 0.5);
		
		var _Btn0 = this.add.button(282.0, 686.0, 'yesBtn', null, this, null, null, null, null);
		_Btn0.scale.set(0.5, 0.5);
		_Btn0.alpha = 0.0;
		_Btn0.anchor.set(0.5, 0.5);
		
		var _quoteNo = this.add.sprite(351.0, 110.0, 'quoteNo');
		_quoteNo.alpha = 0.0;
		
		var _hand = this.add.sprite(501.0, 694.0, 'hand');
		_hand.alpha = 0.0;
		
		var _window = this.add.sprite(432.0, 31.0, 'window');
		_window.scale.set(1.742, 1.742);
		
		var _startPlayBtn = this.add.button(400.0, 581.0, 'playNow', null, this, null, null, null, null);
		_startPlayBtn.scale.set(0.7, 0.7);
		_startPlayBtn.pivot.set(1.0, 1.0);
		_startPlayBtn.anchor.set(0.5, 0.5);
		
		var _endCard = new endCard(this.game);
		_endCard.name = 'endCardObg';
		
		
		
		// fields
		
		this.fGirl = _girl;
		this.fFood1 = _Food1;
		this.fFood0 = _Food0;
		this.fQuoteFeedMe = _quoteFeedMe;
		this.fBtn1 = _Btn1;
		this.fBtn0 = _Btn0;
		this.fQuoteNo = _quoteNo;
		this.fHand = _hand;
		this.fStartPlayBtn = _startPlayBtn;
		this.fEndCard = _endCard;
		// my creation user code
		this.initObjects();
		
	}
	
	/* state-methods-begin */

	/* state-methods-begin */
	
	
	


	initObjects() {
		
		


		let fxBgMusic = this.add.audio('bgMusic', 0.6);
		fxBgMusic.loop = true;
	

		let fxYesOrNo = this.add.audio('yesOrNo');
		
		
		let fxYes = this.add.audio('yes', 0.7);
		let fxError = this.add.audio('error', 0.7);
		let fxBigError = this.add.audio('bigError', 0.7);
		let fxPain = this.add.audio('pain', 1.2);
		let fxScream = this.add.audio('scream', 0.9);
		let fxMusicFin = this.add.audio('musicFin', 0.6);
		let fxEw = this.add.audio('ew', 1);
		
		let fxSeriously = this.add.audio('seriously');



		this.selectedFood = 0;
		let showFood = () => {
			[0,1].forEach(el => {
				this.add.tween(this[`fFood${el}`]).to({
					alpha: 1
				}, 800, Phaser.Easing.Exponential.Out, true).onComplete.add(()=>{
					// this[`fFood${el}`].inputEnabled = true;
					// this[`fFood${el}`].onInputDown.add(()=>{
					// 	selectFood(el);
					// })
					if(el == 0) selectFood(0);
				});
			});
		}

		let selectFood = (selected) => {
			this.selectedFood = selected;
			// this.fFood0.inputEnabled = false;
			// this.fFood1.inputEnabled = false;
			this.fGirl.animations.play('closeEyes').onComplete.add(()=>{
				this.add.tween(this.fQuoteFeedMe).to({alpha: 0}, 200, Phaser.Easing.Exponential.Out, true)
				this.add.tween(this[`fFood${Math.abs(selected-1)}`]).to({alpha: 0}, 500, Phaser.Easing.Exponential.Out, true, 100)
				this.add.tween(this[`fFood${selected}`]).to({
					x: this.stage.width*0.49,
					y: this.stage.width*0.69,
				}, 500, Phaser.Easing.Exponential.Out, true, 100)
				this.fGirl.animations.play('start').onComplete.add(()=>{
					this.fGirl.animations.play('wait');
					showChoice()
				});
			});
		}

		
		let showChoice = () => {
			let audioInterval = setInterval(() => {
				fxYesOrNo.play();
			}, 6500);
			fxYesOrNo.play();


			[0,1].forEach(el => {
				this.add.tween(this[`fBtn${el}`]).to({
					alpha: 1
				}, 800, Phaser.Easing.Exponential.Out, true).onComplete.add(()=>{
				});
				this[`fBtn${el}`].onInputDown.add(()=>{
					selectChoice(el);
					clearInterval(audioInterval);
					this.add.tween(this.fHand).to({
						alpha: 0
					}, 120, Phaser.Easing.Exponential.Out, true, 100).onComplete.add(()=>{
						this.add.tween(this.fBtn0).to({
							alpha: 0
						}, 120, Phaser.Easing.Exponential.Out, true, 100)
						this.add.tween(this.fBtn1).to({
							alpha: 0
						}, 120, Phaser.Easing.Exponential.Out, true, 100)
					});
					
				})
			});
			
			this.add.tween(this.fHand).to({
				alpha: 1
			}, 200, Phaser.Easing.Exponential.Out, true, 800).onComplete.add(()=>{
				this[`fBtn0`].inputEnabled = true;
				this[`fBtn1`].inputEnabled = true;
				this.add.tween(this.fHand).to({
					x: [260, 260, 260, 260, 501, 501, 501, 501]
				}, 2800*1.5, Phaser.Easing.Linear.Out, 1700, true, 2500).start();
				this.add.tween(this.fHand.scale).to({
					x: [1, 1, 1, 1, 0.91, 1, 1, 1, 1], y:[1, 1, 0.91, 1, 1, 1, 1]
				}, 1400*1.5, Phaser.Easing.Linear.Out, 1700, true, 2500).start();
				this.add.tween(this.fHand.scale).to({
					x: [1, 1, 0.91, 0.91, 0.96, 1], y:[1, 1, 0.91, 0.91, 0.96, 1]
				}, 1400*1.5, Phaser.Easing.Linear.Out, 1700, true, 1250).start();
			});
		}
	

		let selectChoice = (answer) => {
						
			this.fBtn0.inputEnabled = false;
			this.fBtn1.inputEnabled = false;
			if(answer){
				this.fQuoteNo.alpha = 1;
			} else{
				fxYes.play().onStop.add(()=>{fxError.play()});
			}
			this.fGirl.animations.play('choise').onComplete.add(()=>{
				
				this.add.tween(this.fQuoteFeedMe).to({alpha: 0}, 200, Phaser.Easing.Exponential.Out, true)
				this.add.tween(this[`fFood${Math.abs(answer-1)}`]).to({alpha: 0}, 500, Phaser.Easing.Exponential.Out, true, 100)
				this.add.tween(this[`fFood${answer}`]).to({
					x: this.stage.width*0.49,
					y: this.stage.width*0.69,
				}, 500, Phaser.Easing.Exponential.Out, true, 100)
				if(answer==this.selectedFood){
					
					fxScream.play().onStop.add(()=>{
						fxBigError.play().onStop.add(()=>{
							setTimeout(() => {
								fxPain.play();
							}, 1800);
							setTimeout(() => {
								
								fxBgMusic.stop();
								fxMusicFin.play().onStop.add(() => {
									this.fEndCard.show()
									setTimeout(() => {
										this.fGirl.animations.stop();
									}, 411);
									setTimeout(() => {
										fxSeriously.play()
									}, 1200);
								})
								
								
							}, 2200);
						});
					});
					this.fGirl.animations.play('fail').onComplete.add(()=>{
						this.fGirl.animations.play('failLoop');
					});
				} else{
					fxEw.play()
					this.fGirl.animations.play('win').onComplete.add(()=>{
						fxBgMusic.stop();
						fxMusicFin.play().onStop.add(() => {
							this.fEndCard.show()
							setTimeout(() => {
								this.fGirl.animations.stop();
							}, 411);
							setTimeout(() => {
								fxSeriously.play()
							}, 1200);
						});
						this.fGirl.animations.play('winLoop');
					});
				}

				
			});
		}




		// this.fEndCard.alpha = 0;


		this.fFood0.inputEnabled = false;
		this.fFood1.inputEnabled = false;
		this.fBtn0.inputEnabled = false;
		this.fBtn1.inputEnabled = false;

		this.add.tween(this.fStartPlayBtn.scale).to({x: [0.66, 0.66, 0.73], y:[0.66, 0.66, 0.73]}, 2800, Phaser.Easing.Exponential.Out, 1700, true, 2500).start()
		
		this.fStartPlayBtn.onInputDown.add(()=>{
			startGame();
			this.fStartPlayBtn.inputEnabled = false;
			this.add.tween(this.fStartPlayBtn).to({alpha: 0}, 400, Phaser.Easing.Exponential.Out).start()
		
		})
		let startGame = () => {
			
			
		fxBgMusic.play();
			this.add.tween(this.fQuoteFeedMe).to({alpha: 1}, 200, Phaser.Easing.Exponential.Out, true)
			this.fGirl.animations.play('preStart').onComplete.add(()=>{
				this.fGirl.animations.play('preStartWait');
				showFood();
			});
		}
		 
	}
	
	/* state-methods-end */
	
}
/* --- end generated code --- */
// -- user code here --
